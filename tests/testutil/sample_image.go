package testutil

import (
	"errors"
	"fmt"
	"os"
	"path/filepath"

	"github.com/macoscontainers/experiments/internal/filesystem"
	"github.com/macoscontainers/experiments/internal/marshal"
	oci "github.com/opencontainers/image-spec/specs-go/v1"
)

// Represents a sample container image that can be used for testing purposes
type SampleImage struct {
	
	// The absolute filesystem path to the directory that holds the OCI layout of our sample image
	RootDir string
	
	// The directory that contains our input Dockerfiles
	DockerfilesDir string
	
	// The directory that will contain OCI image blobs
	BlobsDir string
	
	// The directory that will contain extracted filesystem layers
	LayersDir string
}

// Attempts to create a SampleImage object suitable for use by unit tests
func SampleImageForTest() (*SampleImage, error) {
	
	// Attempt to resolve the absolute path to the root directory for the sample image
	rootDir, err := filepath.Abs(filepath.Join(".", "testdata", "sample"))
	if err != nil {
		return nil, err
	}
	
	// Return a populated SampleImage object
	return &SampleImage{
		RootDir: rootDir,
		DockerfilesDir: filepath.Dir(rootDir),
		BlobsDir: filepath.Join(rootDir, "blobs", "sha256"),
		LayersDir: filepath.Join(rootDir, "layers"),
	}, nil
}

// Determines whether the directory that holds our sample image exists
func (sample *SampleImage) Exists() bool {
	return filesystem.Exists(sample.RootDir)
}

// Generates our sample container image
func (sample *SampleImage) Generate() error {
	
	// Generate the flags for the bind-mounts that we will use when running containers with Docker
	hostdirMount := fmt.Sprintf("-v%s:/hostdir", sample.RootDir)
	socketMount := "-v/var/run/docker.sock:/var/run/docker.sock"
	
	// Remove our output directory if it already exists
	if sample.Exists() {
		if err := os.RemoveAll(sample.RootDir); err != nil {
			return err
		}
	}
	
	// Create our output directory
	if err := os.MkdirAll(sample.RootDir, os.ModePerm); err != nil {
		return err
	}
	
	// Build the container image for skopeo
	if err := DockerBuild("skopeo:latest", sample.DockerfilesDir, filepath.Join(sample.DockerfilesDir, "Dockerfile.skopeo")); err != nil {
		return err
	}
	
	// Build our sample container image
	if err := DockerBuild("sample-layers:latest", sample.DockerfilesDir, filepath.Join(sample.DockerfilesDir, "Dockerfile")); err != nil {
		return err
	}
	
	// Use skopeo to copy the sample container image to an OCI directory layout
	if err := DockerRun("skopeo:latest", []string{"copy", "docker-daemon:sample-layers:latest", "oci:/hostdir:latest"}, []string{hostdirMount, socketMount}); err != nil {
		return err
	}
	
	// Take ownership of the generated tarballs (since skopeo generates them as root)
	alpineImage := "alpine:3.13.5"
	if err := DockerRun(alpineImage, []string{"sh", "-c", fmt.Sprintf("chown -R %d:%d /hostdir", os.Getuid(), os.Getgid())}, []string{hostdirMount}); err != nil {
		return err
	}
	
	// Parse the OCI image index
	index := &oci.Index{}
	if err := marshal.UnmarshalJsonFile(filepath.Join(sample.RootDir, "index.json"), index); err != nil {
		return err
	}
	
	// Verify that we have exactly one image manifest
	if len(index.Manifests) != 1 {
		return errors.New(fmt.Sprint("expected exactly one image manifest in OCI index file, found ", len(index.Manifests)))
	}
	
	// Parse the image manifest
	manifest := &oci.Manifest{}
	if err := marshal.UnmarshalJsonFile(filepath.Join(sample.BlobsDir, index.Manifests[0].Digest.Hex()), manifest); err != nil {
		return err
	}
	
	// Verify that the archive blob exists for each filesystem layer
	for _, layer := range manifest.Layers {
		archive := filepath.Join(sample.BlobsDir, layer.Digest.Hex())
		if !filesystem.Exists(archive) {
			return errors.New(fmt.Sprint("could not find archive blob for image layer with digest ", layer.Digest.Hex()))
		}
	}
	
	// Copy the merged view of the final filesystem layer to the host system so it can be compared to results generated by unpacking and applying the individual filesystem layers
	if err := DockerRun("sample-layers:latest", []string{"/bin/sh", "-c", "sleep infinity"}, []string{"-d", "--name", "sample-layers"}); err != nil {
		return err
	}
	if err := DockerCopy("sample-layers:/", filepath.Join(sample.RootDir, "final")); err != nil {
		return err
	}
	if err := DockerStop("sample-layers"); err != nil {
		return err
	}
	
	return nil
}
